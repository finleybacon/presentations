[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Presentations",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nAudience\n\n\n\nAuthor\n\n\n\n\n\n\n\n\n2025-09-24\n\n\nCALM: Architecture-as-Code\n\n\nISD Architecture\n\n\nFinley Bacon\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "calm/index.html#what",
    "href": "calm/index.html#what",
    "title": "CALM: Architecture-as-Code",
    "section": "What?",
    "text": "What?\n\nModelling architectures in code\nJSON, DSLs\nIncrementally"
  },
  {
    "objectID": "calm/index.html#why",
    "href": "calm/index.html#why",
    "title": "CALM: Architecture-as-Code",
    "section": "Why",
    "text": "Why\n\nCos\nThe\nBenefits"
  },
  {
    "objectID": "calm/index.html#what-is-calm",
    "href": "calm/index.html#what-is-calm",
    "title": "CALM: Architecture-as-Code",
    "section": "What is CALM?",
    "text": "What is CALM?\nThe Common Architecture Language Model\n\n\nhttps://calm.finos.org/"
  },
  {
    "objectID": "calm/index.html#json-schemas",
    "href": "calm/index.html#json-schemas",
    "title": "CALM: Architecture-as-Code",
    "section": "JSON Schemas",
    "text": "JSON Schemas"
  },
  {
    "objectID": "calm/index.html#cast-your-minds-back",
    "href": "calm/index.html#cast-your-minds-back",
    "title": "CALM: Architecture-as-Code",
    "section": "Cast your minds back",
    "text": "Cast your minds back"
  },
  {
    "objectID": "calm/index.html#data-archive",
    "href": "calm/index.html#data-archive",
    "title": "CALM: Architecture-as-Code",
    "section": "Data Archive",
    "text": "Data Archive"
  },
  {
    "objectID": "calm/index.html#arc-services-portal",
    "href": "calm/index.html#arc-services-portal",
    "title": "CALM: Architecture-as-Code",
    "section": "ARC Services Portal",
    "text": "ARC Services Portal"
  },
  {
    "objectID": "calm/index.html#section",
    "href": "calm/index.html#section",
    "title": "CALM: Architecture-as-Code",
    "section": "",
    "text": "c4model.com:\n\nThe C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase."
  },
  {
    "objectID": "calm/index.html#rationale",
    "href": "calm/index.html#rationale",
    "title": "CALM: Architecture-as-Code",
    "section": "Rationale",
    "text": "Rationale"
  },
  {
    "objectID": "calm/index.html#in-short",
    "href": "calm/index.html#in-short",
    "title": "CALM: Architecture-as-Code",
    "section": "In short",
    "text": "In short\nc4model.com\n\n\n\nInconsistent notation (colour coding, shapes, line styles, etc)\nAmbiguous naming\nUnlabelled relationships\nGeneric terminology\nMissing technology choices\nMixed abstractions\nNot good at communicating architecture"
  },
  {
    "objectID": "calm/index.html#workflow",
    "href": "calm/index.html#workflow",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow",
    "text": "Workflow\n\nModel using Structurizr DSL\n\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    model {\n\n        properties {\n            \"structurizr.groupSeparator\" \"/\"\n        }\n\n        user = person \"Researcher\" \"Uses the platform to manage their research profile and data.\"\n        admin = person \"Admin\" \"Portal user with elevated permissions to edit data or review submissions.\"\n\n        entra = softwareSystem \"Microsoft Entra\" \"Identity provider (SSO)\" \"Existing System\"\n        tre = softwareSystem \"TRE\" \"Secure processing environment for sensitive research data\" \"Existing System\"\n        ghcr = softwareSystem \"GitHub Container Registry\" \"Stores container images\" \"Existing System\"\n        uclSystem = softwareSystem \"...\" \"Other UCL consumer of portal data\" \"Existing System\"\n\n        portal = softwareSystem \"ARC Services Portal\" \"Enables management of Studies, Projects, user training and information governance\" {\n\n            group \"K8S cluster\" {\n\n                api = container \"API\" \"API backend with /web/api and /tre/api (and other) endpoints\" \"Go\" {\n\n                    group \"Shared Services\" {\n                        projectService = component \"Project Service\" \"Handles project workflows\" \"Go\"\n                        userService = component \"User Service\" \"Handles user workflows\" \"Go\"\n                        otherService = component \"...\" \"Other backend services\" \"Go\"\n                    }\n\n                    group \"Web API\" {\n                        webhttpHandlers = component \"HTTP Handlers for web frontend\" \"Handles REST endpoints\" \"Go\"\n                        webhttpHandlers -&gt; userService \"Calls\"\n                        webhttpHandlers -&gt; projectService \"Calls\"\n                        webhttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"TRE API\" {\n                        trehttpHandlers = component \"HTTP Handlers for UCL TREs\" \"Handles REST endpoints\" \"Go\"\n                        trehttpHandlers -&gt; userService \"Calls\"\n                        trehttpHandlers -&gt; projectService \"Calls\"\n                        trehttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"Other API\" {\n                        otherhttpHandlers = component \"HTTP Handlers for other UCL systems\" \"Handles REST endpoints\" \"Go\"\n                        otherhttpHandlers -&gt; otherService \"Calls\"\n                    }\n                }\n\n                webFrontend = container \"Web Frontend\" \"User-facing web app\" \"React, TypeScript\" {\n                    pages = component \"Pages\" \"UCL Design System-styled pages for profile, studies, projects\" \"React\"\n                    apiClient = component \"API Client\" \"Generated from OpenAPI spec\" \"TypeScript\"\n\n                    pages -&gt; apiClient \"Calls\"\n                }\n\n                oauth2Proxy = container \"OAuth2 Proxy\" \"Proxy providing OAuth2 authentication\" \"quay.io/oauth2-proxy/oauth2-proxy\"\n\n                nginx = container \"Reverse Proxy\" \"Routes requests to frontend and backend\" \"nginx\"\n\n                postgres = container \"Database\" \"Stores user, project, portal etc. data\" \"PostgreSQL\"\n\n                api.projectService -&gt; postgres \"Reads/writes data\"\n                api.userService -&gt; postgres \"Reads/writes data\"\n                api.otherService -&gt; postgres \"Read/writes data\"\n                nginx -&gt; api.trehttpHandlers \"Proxies /tre/api requests\"\n                nginx -&gt; api.otherhttpHandlers \"Proxies other api requests\"\n                nginx -&gt; webFrontend.pages \"Serves\"\n                webFrontend.apiClient -&gt; oauth2Proxy \"Forwards /web/api requests for authentication\"\n                oauth2Proxy -&gt; api.webhttpHandlers \"Forwards authenticated /web/api requests to backend\"\n\n            }\n\n            deploy = container \"CI/CD Pipeline\" \"Builds and deploys infrastructure and app\" \"GitHub Actions + Terraform\" {\n\n                group \"Portal App Repository\" {\n                    gha_portal = component \"GitHub Actions (Portal Repo)\" \"Builds & pushes container images\" \"GitHub Actions\"\n                }\n\n                group \"Infrastructure Repository\" {\n                    gha_infra = component \"GitHub Actions (Infra Repo)\" \"Applies Terraform in AWS\" \"GitHub Actions\"\n                    tf = component \"Terraform Code\" \"Defines and provisions cloud infra\" \"Terraform\"\n                    gha_infra -&gt; tf \"Runs\"\n                }\n            }\n\n            portal.deploy.tf -&gt; ghcr \"Pulls images for deployment\"\n            portal.deploy.gha_portal -&gt; ghcr \"Pushes container images\"\n        }\n\n        user -&gt; portal.webFrontend.pages \"Accesses via browser\"\n        admin -&gt; portal.webFrontend.pages \"Administers via browser\"\n        portal.oauth2Proxy -&gt; entra \"Authenticates requests against\" \"SSO\"\n        tre -&gt; portal.nginx \"Accesses /tre/api for data retrieval\" \"REST/JSON\"\n        uclSystem -&gt; portal.nginx \"Accesses api for data retrieval\" \"REST/JSON\"\n    }\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "calm/index.html#workflow-1",
    "href": "calm/index.html#workflow-1",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow",
    "text": "Workflow\n\nCreate views\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    model {\n\n        properties {\n            \"structurizr.groupSeparator\" \"/\"\n        }\n\n        user = person \"Researcher\" \"Uses the platform to manage their research profile and data.\"\n        admin = person \"Admin\" \"Portal user with elevated permissions to edit data or review submissions.\"\n\n        entra = softwareSystem \"Microsoft Entra\" \"Identity provider (SSO)\" \"Existing System\"\n        tre = softwareSystem \"TRE\" \"Secure processing environment for sensitive research data\" \"Existing System\"\n        ghcr = softwareSystem \"GitHub Container Registry\" \"Stores container images\" \"Existing System\"\n        uclSystem = softwareSystem \"...\" \"Other UCL consumer of portal data\" \"Existing System\"\n\n        portal = softwareSystem \"ARC Services Portal\" \"Enables management of Studies, Projects, user training and information governance\" {\n\n            group \"K8S cluster\" {\n\n                api = container \"API\" \"API backend with /web/api and /tre/api (and other) endpoints\" \"Go\" {\n\n                    group \"Shared Services\" {\n                        projectService = component \"Project Service\" \"Handles project workflows\" \"Go\"\n                        userService = component \"User Service\" \"Handles user workflows\" \"Go\"\n                        otherService = component \"...\" \"Other backend services\" \"Go\"\n                    }\n\n                    group \"Web API\" {\n                        webhttpHandlers = component \"HTTP Handlers for web frontend\" \"Handles REST endpoints\" \"Go\"\n                        webhttpHandlers -&gt; userService \"Calls\"\n                        webhttpHandlers -&gt; projectService \"Calls\"\n                        webhttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"TRE API\" {\n                        trehttpHandlers = component \"HTTP Handlers for UCL TREs\" \"Handles REST endpoints\" \"Go\"\n                        trehttpHandlers -&gt; userService \"Calls\"\n                        trehttpHandlers -&gt; projectService \"Calls\"\n                        trehttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"Other API\" {\n                        otherhttpHandlers = component \"HTTP Handlers for other UCL systems\" \"Handles REST endpoints\" \"Go\"\n                        otherhttpHandlers -&gt; otherService \"Calls\"\n                    }\n                }\n\n                webFrontend = container \"Web Frontend\" \"User-facing web app\" \"React, TypeScript\" {\n                    pages = component \"Pages\" \"UCL Design System-styled pages for profile, studies, projects\" \"React\"\n                    apiClient = component \"API Client\" \"Generated from OpenAPI spec\" \"TypeScript\"\n\n                    pages -&gt; apiClient \"Calls\"\n                }\n\n                oauth2Proxy = container \"OAuth2 Proxy\" \"Proxy providing OAuth2 authentication\" \"quay.io/oauth2-proxy/oauth2-proxy\"\n\n                nginx = container \"Reverse Proxy\" \"Routes requests to frontend and backend\" \"nginx\"\n\n                postgres = container \"Database\" \"Stores user, project, portal etc. data\" \"PostgreSQL\"\n\n                api.projectService -&gt; postgres \"Reads/writes data\"\n                api.userService -&gt; postgres \"Reads/writes data\"\n                api.otherService -&gt; postgres \"Read/writes data\"\n                nginx -&gt; api.trehttpHandlers \"Proxies /tre/api requests\"\n                nginx -&gt; api.otherhttpHandlers \"Proxies other api requests\"\n                nginx -&gt; webFrontend.pages \"Serves\"\n                webFrontend.apiClient -&gt; oauth2Proxy \"Forwards /web/api requests for authentication\"\n                oauth2Proxy -&gt; api.webhttpHandlers \"Forwards authenticated /web/api requests to backend\"\n\n            }\n\n            deploy = container \"CI/CD Pipeline\" \"Builds and deploys infrastructure and app\" \"GitHub Actions + Terraform\" {\n\n                group \"Portal App Repository\" {\n                    gha_portal = component \"GitHub Actions (Portal Repo)\" \"Builds & pushes container images\" \"GitHub Actions\"\n                }\n\n                group \"Infrastructure Repository\" {\n                    gha_infra = component \"GitHub Actions (Infra Repo)\" \"Applies Terraform in AWS\" \"GitHub Actions\"\n                    tf = component \"Terraform Code\" \"Defines and provisions cloud infra\" \"Terraform\"\n                    gha_infra -&gt; tf \"Runs\"\n                }\n            }\n\n            portal.deploy.tf -&gt; ghcr \"Pulls images for deployment\"\n            portal.deploy.gha_portal -&gt; ghcr \"Pushes container images\"\n        }\n\n        user -&gt; portal.webFrontend.pages \"Accesses via browser\"\n        admin -&gt; portal.webFrontend.pages \"Administers via browser\"\n        portal.oauth2Proxy -&gt; entra \"Authenticates requests against\" \"SSO\"\n        tre -&gt; portal.nginx \"Accesses /tre/api for data retrieval\" \"REST/JSON\"\n        uclSystem -&gt; portal.nginx \"Accesses api for data retrieval\" \"REST/JSON\"\n    }\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "calm/index.html#hello-world-example",
    "href": "calm/index.html#hello-world-example",
    "title": "CALM: Architecture-as-Code",
    "section": "Hello World Example",
    "text": "Hello World Example\n\nStep 1: Define the main function.\n\n\nStep 2: Print “Hello World” inside the function.\n\n{.python code-line-numbers=\"1|2| .fragment} def main():     print(\"Hello World\")"
  },
  {
    "objectID": "calm/index.html#workflow-2",
    "href": "calm/index.html#workflow-2",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow",
    "text": "Workflow\n\nApply styles\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    model {\n\n        properties {\n            \"structurizr.groupSeparator\" \"/\"\n        }\n\n        user = person \"Researcher\" \"Uses the platform to manage their research profile and data.\"\n        admin = person \"Admin\" \"Portal user with elevated permissions to edit data or review submissions.\"\n\n        entra = softwareSystem \"Microsoft Entra\" \"Identity provider (SSO)\" \"Existing System\"\n        tre = softwareSystem \"TRE\" \"Secure processing environment for sensitive research data\" \"Existing System\"\n        ghcr = softwareSystem \"GitHub Container Registry\" \"Stores container images\" \"Existing System\"\n        uclSystem = softwareSystem \"...\" \"Other UCL consumer of portal data\" \"Existing System\"\n\n        portal = softwareSystem \"ARC Services Portal\" \"Enables management of Studies, Projects, user training and information governance\" {\n\n            group \"K8S cluster\" {\n\n                api = container \"API\" \"API backend with /web/api and /tre/api (and other) endpoints\" \"Go\" {\n\n                    group \"Shared Services\" {\n                        projectService = component \"Project Service\" \"Handles project workflows\" \"Go\"\n                        userService = component \"User Service\" \"Handles user workflows\" \"Go\"\n                        otherService = component \"...\" \"Other backend services\" \"Go\"\n                    }\n\n                    group \"Web API\" {\n                        webhttpHandlers = component \"HTTP Handlers for web frontend\" \"Handles REST endpoints\" \"Go\"\n                        webhttpHandlers -&gt; userService \"Calls\"\n                        webhttpHandlers -&gt; projectService \"Calls\"\n                        webhttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"TRE API\" {\n                        trehttpHandlers = component \"HTTP Handlers for UCL TREs\" \"Handles REST endpoints\" \"Go\"\n                        trehttpHandlers -&gt; userService \"Calls\"\n                        trehttpHandlers -&gt; projectService \"Calls\"\n                        trehttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"Other API\" {\n                        otherhttpHandlers = component \"HTTP Handlers for other UCL systems\" \"Handles REST endpoints\" \"Go\"\n                        otherhttpHandlers -&gt; otherService \"Calls\"\n                    }\n                }\n\n                webFrontend = container \"Web Frontend\" \"User-facing web app\" \"React, TypeScript\" {\n                    pages = component \"Pages\" \"UCL Design System-styled pages for profile, studies, projects\" \"React\"\n                    apiClient = component \"API Client\" \"Generated from OpenAPI spec\" \"TypeScript\"\n\n                    pages -&gt; apiClient \"Calls\"\n                }\n\n                oauth2Proxy = container \"OAuth2 Proxy\" \"Proxy providing OAuth2 authentication\" \"quay.io/oauth2-proxy/oauth2-proxy\"\n\n                nginx = container \"Reverse Proxy\" \"Routes requests to frontend and backend\" \"nginx\"\n\n                postgres = container \"Database\" \"Stores user, project, portal etc. data\" \"PostgreSQL\"\n\n                api.projectService -&gt; postgres \"Reads/writes data\"\n                api.userService -&gt; postgres \"Reads/writes data\"\n                api.otherService -&gt; postgres \"Read/writes data\"\n                nginx -&gt; api.trehttpHandlers \"Proxies /tre/api requests\"\n                nginx -&gt; api.otherhttpHandlers \"Proxies other api requests\"\n                nginx -&gt; webFrontend.pages \"Serves\"\n                webFrontend.apiClient -&gt; oauth2Proxy \"Forwards /web/api requests for authentication\"\n                oauth2Proxy -&gt; api.webhttpHandlers \"Forwards authenticated /web/api requests to backend\"\n\n            }\n\n            deploy = container \"CI/CD Pipeline\" \"Builds and deploys infrastructure and app\" \"GitHub Actions + Terraform\" {\n\n                group \"Portal App Repository\" {\n                    gha_portal = component \"GitHub Actions (Portal Repo)\" \"Builds & pushes container images\" \"GitHub Actions\"\n                }\n\n                group \"Infrastructure Repository\" {\n                    gha_infra = component \"GitHub Actions (Infra Repo)\" \"Applies Terraform in AWS\" \"GitHub Actions\"\n                    tf = component \"Terraform Code\" \"Defines and provisions cloud infra\" \"Terraform\"\n                    gha_infra -&gt; tf \"Runs\"\n                }\n            }\n\n            portal.deploy.tf -&gt; ghcr \"Pulls images for deployment\"\n            portal.deploy.gha_portal -&gt; ghcr \"Pushes container images\"\n        }\n\n        user -&gt; portal.webFrontend.pages \"Accesses via browser\"\n        admin -&gt; portal.webFrontend.pages \"Administers via browser\"\n        portal.oauth2Proxy -&gt; entra \"Authenticates requests against\" \"SSO\"\n        tre -&gt; portal.nginx \"Accesses /tre/api for data retrieval\" \"REST/JSON\"\n        uclSystem -&gt; portal.nginx \"Accesses api for data retrieval\" \"REST/JSON\"\n    }\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "calm/index.html#problems",
    "href": "calm/index.html#problems",
    "title": "CALM: Architecture-as-Code",
    "section": "Problems",
    "text": "Problems\nc4model.com:\n\nInconsistent notation (colour coding, shapes, line styles, etc)\nAmbiguous naming\nUnlabelled relationships\nGeneric terminology\nMissing technology choices\nMixed abstractions\nNot good at communicating architecture"
  },
  {
    "objectID": "calm/index.html#section-1",
    "href": "calm/index.html#section-1",
    "title": "CALM: Architecture-as-Code",
    "section": "",
    "text": "Common pitfalls:\n\nInconsistent notation (colour coding, shapes, line styles, etc.)\nAmbiguous naming\nUnlabelled relationships\nGeneric terminology\nMissing technology choices\nMixed abstractions\nNot good at communicating architecture"
  },
  {
    "objectID": "calm/index.html#workflow-.incrementalfalse",
    "href": "calm/index.html#workflow-.incrementalfalse",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow {.incremental=false}",
    "text": "Workflow {.incremental=false}\n\nCreate views\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    ...\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}\n}\n:::"
  },
  {
    "objectID": "calm/index.html#workflows",
    "href": "calm/index.html#workflows",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflows",
    "text": "Workflows\n\nApply styles\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    model {\n\n        properties {\n            \"structurizr.groupSeparator\" \"/\"\n        }\n\n        user = person \"Researcher\" \"Uses the platform to manage their research profile and data.\"\n        admin = person \"Admin\" \"Portal user with elevated permissions to edit data or review submissions.\"\n\n        entra = softwareSystem \"Microsoft Entra\" \"Identity provider (SSO)\" \"Existing System\"\n        tre = softwareSystem \"TRE\" \"Secure processing environment for sensitive research data\" \"Existing System\"\n        ghcr = softwareSystem \"GitHub Container Registry\" \"Stores container images\" \"Existing System\"\n        uclSystem = softwareSystem \"...\" \"Other UCL consumer of portal data\" \"Existing System\"\n\n        portal = softwareSystem \"ARC Services Portal\" \"Enables management of Studies, Projects, user training and information governance\" {\n\n            group \"K8S cluster\" {\n\n                api = container \"API\" \"API backend with /web/api and /tre/api (and other) endpoints\" \"Go\" {\n\n                    group \"Shared Services\" {\n                        projectService = component \"Project Service\" \"Handles project workflows\" \"Go\"\n                        userService = component \"User Service\" \"Handles user workflows\" \"Go\"\n                        otherService = component \"...\" \"Other backend services\" \"Go\"\n                    }\n\n                    group \"Web API\" {\n                        webhttpHandlers = component \"HTTP Handlers for web frontend\" \"Handles REST endpoints\" \"Go\"\n                        webhttpHandlers -&gt; userService \"Calls\"\n                        webhttpHandlers -&gt; projectService \"Calls\"\n                        webhttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"TRE API\" {\n                        trehttpHandlers = component \"HTTP Handlers for UCL TREs\" \"Handles REST endpoints\" \"Go\"\n                        trehttpHandlers -&gt; userService \"Calls\"\n                        trehttpHandlers -&gt; projectService \"Calls\"\n                        trehttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"Other API\" {\n                        otherhttpHandlers = component \"HTTP Handlers for other UCL systems\" \"Handles REST endpoints\" \"Go\"\n                        otherhttpHandlers -&gt; otherService \"Calls\"\n                    }\n                }\n\n                webFrontend = container \"Web Frontend\" \"User-facing web app\" \"React, TypeScript\" {\n                    pages = component \"Pages\" \"UCL Design System-styled pages for profile, studies, projects\" \"React\"\n                    apiClient = component \"API Client\" \"Generated from OpenAPI spec\" \"TypeScript\"\n\n                    pages -&gt; apiClient \"Calls\"\n                }\n\n                oauth2Proxy = container \"OAuth2 Proxy\" \"Proxy providing OAuth2 authentication\" \"quay.io/oauth2-proxy/oauth2-proxy\"\n\n                nginx = container \"Reverse Proxy\" \"Routes requests to frontend and backend\" \"nginx\"\n\n                postgres = container \"Database\" \"Stores user, project, portal etc. data\" \"PostgreSQL\"\n\n                api.projectService -&gt; postgres \"Reads/writes data\"\n                api.userService -&gt; postgres \"Reads/writes data\"\n                api.otherService -&gt; postgres \"Read/writes data\"\n                nginx -&gt; api.trehttpHandlers \"Proxies /tre/api requests\"\n                nginx -&gt; api.otherhttpHandlers \"Proxies other api requests\"\n                nginx -&gt; webFrontend.pages \"Serves\"\n                webFrontend.apiClient -&gt; oauth2Proxy \"Forwards /web/api requests for authentication\"\n                oauth2Proxy -&gt; api.webhttpHandlers \"Forwards authenticated /web/api requests to backend\"\n\n            }\n\n            deploy = container \"CI/CD Pipeline\" \"Builds and deploys infrastructure and app\" \"GitHub Actions + Terraform\" {\n\n                group \"Portal App Repository\" {\n                    gha_portal = component \"GitHub Actions (Portal Repo)\" \"Builds & pushes container images\" \"GitHub Actions\"\n                }\n\n                group \"Infrastructure Repository\" {\n                    gha_infra = component \"GitHub Actions (Infra Repo)\" \"Applies Terraform in AWS\" \"GitHub Actions\"\n                    tf = component \"Terraform Code\" \"Defines and provisions cloud infra\" \"Terraform\"\n                    gha_infra -&gt; tf \"Runs\"\n                }\n            }\n\n            portal.deploy.tf -&gt; ghcr \"Pulls images for deployment\"\n            portal.deploy.gha_portal -&gt; ghcr \"Pushes container images\"\n        }\n\n        user -&gt; portal.webFrontend.pages \"Accesses via browser\"\n        admin -&gt; portal.webFrontend.pages \"Administers via browser\"\n        portal.oauth2Proxy -&gt; entra \"Authenticates requests against\" \"SSO\"\n        tre -&gt; portal.nginx \"Accesses /tre/api for data retrieval\" \"REST/JSON\"\n        uclSystem -&gt; portal.nginx \"Accesses api for data retrieval\" \"REST/JSON\"\n    }\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "calm/index.html#workflows-1",
    "href": "calm/index.html#workflows-1",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflows",
    "text": "Workflows\n\nExport images\n\n\ndocker pull structurizr/lite\ndocker run -it --rm -p 8080:8080 -v PATH:/usr/local/structurizr structurizr/lite"
  },
  {
    "objectID": "calm/index.html#how-does-calm-fit-in",
    "href": "calm/index.html#how-does-calm-fit-in",
    "title": "CALM: Architecture-as-Code",
    "section": "How does CALM fit in?",
    "text": "How does CALM fit in?\n\nIt does not replace the C4 model, it complements it."
  },
  {
    "objectID": "calm/index.html#comparison",
    "href": "calm/index.html#comparison",
    "title": "CALM: Architecture-as-Code",
    "section": "Comparison",
    "text": "Comparison\n\n\nC4 Model\n\nA set of hierarchical abstractions - software systems, containers, components, and code.\nA set of hierarchical diagrams - system context, containers, components, and code.\nNotation independent.\nTooling independent.\n\n\nCALM\n\nA JSON Meta Schema to define your architecture\nA CLI for generating, validating, docifying architectures\nA UI for visualising architectures\ni.e. provides notation rules and tools"
  },
  {
    "objectID": "calm/index.html#workflow-3",
    "href": "calm/index.html#workflow-3",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow",
    "text": "Workflow\n\nGenerate and export images\n\n\ndocker pull structurizr/lite\ndocker run -it --rm -p 8080:8080 -v PATH:/usr/local/structurizr structurizr/lite"
  },
  {
    "objectID": "calm/index.html#c4-comparison",
    "href": "calm/index.html#c4-comparison",
    "title": "CALM: Architecture-as-Code",
    "section": "C4 Comparison",
    "text": "C4 Comparison\n\n\nC4 Model\n\nA set of hierarchical abstractions - software systems, containers, components, and code.\nA set of hierarchical diagrams - system context, containers, components, and code.\nNotation independent.\nTooling independent.\n\n\nCALM\n\nA JSON Meta Schema to define your architecture\nA CLI for generating, validating, docifying architectures\nA UI for visualising architectures\ni.e. provides notation rules and tools"
  },
  {
    "objectID": "calm/index.html#workflow-.incrementalfalse-data-menu-titleworkflow-ii",
    "href": "calm/index.html#workflow-.incrementalfalse-data-menu-titleworkflow-ii",
    "title": "CALM: Architecture-as-Code",
    "section": "Workflow {.incremental=false data-menu-title=“Workflow (ii)”}",
    "text": "Workflow {.incremental=false data-menu-title=“Workflow (ii)”}\n\nCreate views\n\nworkspace \"ARC Services Portal\" \"Models the architecture of a research services web portal\" {\n\n    !identifiers hierarchical\n\n    model {\n\n        properties {\n            \"structurizr.groupSeparator\" \"/\"\n        }\n\n        user = person \"Researcher\" \"Uses the platform to manage their research profile and data.\"\n        admin = person \"Admin\" \"Portal user with elevated permissions to edit data or review submissions.\"\n\n        entra = softwareSystem \"Microsoft Entra\" \"Identity provider (SSO)\" \"Existing System\"\n        tre = softwareSystem \"TRE\" \"Secure processing environment for sensitive research data\" \"Existing System\"\n        ghcr = softwareSystem \"GitHub Container Registry\" \"Stores container images\" \"Existing System\"\n        uclSystem = softwareSystem \"...\" \"Other UCL consumer of portal data\" \"Existing System\"\n\n        portal = softwareSystem \"ARC Services Portal\" \"Enables management of Studies, Projects, user training and information governance\" {\n\n            group \"K8S cluster\" {\n\n                api = container \"API\" \"API backend with /web/api and /tre/api (and other) endpoints\" \"Go\" {\n\n                    group \"Shared Services\" {\n                        projectService = component \"Project Service\" \"Handles project workflows\" \"Go\"\n                        userService = component \"User Service\" \"Handles user workflows\" \"Go\"\n                        otherService = component \"...\" \"Other backend services\" \"Go\"\n                    }\n\n                    group \"Web API\" {\n                        webhttpHandlers = component \"HTTP Handlers for web frontend\" \"Handles REST endpoints\" \"Go\"\n                        webhttpHandlers -&gt; userService \"Calls\"\n                        webhttpHandlers -&gt; projectService \"Calls\"\n                        webhttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"TRE API\" {\n                        trehttpHandlers = component \"HTTP Handlers for UCL TREs\" \"Handles REST endpoints\" \"Go\"\n                        trehttpHandlers -&gt; userService \"Calls\"\n                        trehttpHandlers -&gt; projectService \"Calls\"\n                        trehttpHandlers -&gt; otherService \"Calls\"\n                    }\n\n                    group \"Other API\" {\n                        otherhttpHandlers = component \"HTTP Handlers for other UCL systems\" \"Handles REST endpoints\" \"Go\"\n                        otherhttpHandlers -&gt; otherService \"Calls\"\n                    }\n                }\n\n                webFrontend = container \"Web Frontend\" \"User-facing web app\" \"React, TypeScript\" {\n                    pages = component \"Pages\" \"UCL Design System-styled pages for profile, studies, projects\" \"React\"\n                    apiClient = component \"API Client\" \"Generated from OpenAPI spec\" \"TypeScript\"\n\n                    pages -&gt; apiClient \"Calls\"\n                }\n\n                oauth2Proxy = container \"OAuth2 Proxy\" \"Proxy providing OAuth2 authentication\" \"quay.io/oauth2-proxy/oauth2-proxy\"\n\n                nginx = container \"Reverse Proxy\" \"Routes requests to frontend and backend\" \"nginx\"\n\n                postgres = container \"Database\" \"Stores user, project, portal etc. data\" \"PostgreSQL\"\n\n                api.projectService -&gt; postgres \"Reads/writes data\"\n                api.userService -&gt; postgres \"Reads/writes data\"\n                api.otherService -&gt; postgres \"Read/writes data\"\n                nginx -&gt; api.trehttpHandlers \"Proxies /tre/api requests\"\n                nginx -&gt; api.otherhttpHandlers \"Proxies other api requests\"\n                nginx -&gt; webFrontend.pages \"Serves\"\n                webFrontend.apiClient -&gt; oauth2Proxy \"Forwards /web/api requests for authentication\"\n                oauth2Proxy -&gt; api.webhttpHandlers \"Forwards authenticated /web/api requests to backend\"\n\n            }\n\n            deploy = container \"CI/CD Pipeline\" \"Builds and deploys infrastructure and app\" \"GitHub Actions + Terraform\" {\n\n                group \"Portal App Repository\" {\n                    gha_portal = component \"GitHub Actions (Portal Repo)\" \"Builds & pushes container images\" \"GitHub Actions\"\n                }\n\n                group \"Infrastructure Repository\" {\n                    gha_infra = component \"GitHub Actions (Infra Repo)\" \"Applies Terraform in AWS\" \"GitHub Actions\"\n                    tf = component \"Terraform Code\" \"Defines and provisions cloud infra\" \"Terraform\"\n                    gha_infra -&gt; tf \"Runs\"\n                }\n            }\n\n            portal.deploy.tf -&gt; ghcr \"Pulls images for deployment\"\n            portal.deploy.gha_portal -&gt; ghcr \"Pushes container images\"\n        }\n\n        user -&gt; portal.webFrontend.pages \"Accesses via browser\"\n        admin -&gt; portal.webFrontend.pages \"Administers via browser\"\n        portal.oauth2Proxy -&gt; entra \"Authenticates requests against\" \"SSO\"\n        tre -&gt; portal.nginx \"Accesses /tre/api for data retrieval\" \"REST/JSON\"\n        uclSystem -&gt; portal.nginx \"Accesses api for data retrieval\" \"REST/JSON\"\n    }\n\n    views {\n\n        systemContext portal \"C1-Portal_Context\" {\n            include *\n            description \"Context diagram showing how the Research Platform fits within the broader environment.\"\n        }\n\n        container portal \"C2-Portal_Containers\" {\n            include *\n            description \"Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB.\"\n        }\n\n        component portal.api \"C3-Web_API_Internals\" {\n            include *\n            description \"Component view showing key service components inside the API backend.\"\n        }\n\n        component portal.webFrontend \"C3-Web_Frontend_Internals\" {\n            include *\n            description \"Component view showing the UI modules and OpenAPI client.\"\n        }\n\n        component portal.deploy \"C3-Deployment_Workflow\" {\n            include *\n            description \"Component view showing how CI/CD is managed using GitHub Actions and Terraform.\"\n        }\n\n        styles {\n            element \"Person\" {\n                shape person\n                background #08427b\n                color #ffffff\n            }\n\n            element \"Software System\" {\n                background #1168bd\n                color #ffffff\n            }\n\n            element \"Container\" {\n                background #438dd5\n                color #ffffff\n            }\n\n            element \"Component\" {\n                background #85bbf0\n                color #000000\n            }\n\n            element \"Existing System\" {\n                background #999999\n            }\n\n            element \"Group:K8S cluster\" {\n                color #d86613\n                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png\n            }\n        }\n    }\n}"
  }
]