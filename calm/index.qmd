---
author: "Finley Bacon"
date: 2025-09-24
format: revealjs
subtitle: "ISD Architecture"
title: "CALM:<br> Architecture-as-Code"
---

# Architecture as Code?

## What?

- Modelling architecture in code (e.g. JSON, YAML, DSLs)
- Generate diagrams from models instead of manually drawing them
- Store architecture close to source code

## Why?

::: {.fragment}
Alleged benefits:
:::

- Machine-readable architecture models enable automated validation & compliance checks
- Architecture can be version controlled alongside source code
- Developers and architects work from the same source of truth
- A single model can generate multiple outputs (diagrams, documentation, reports)
- Easier to keep architecture up to date as the system changes

## Before we test those claims...
::: {.fragment}
::: {.r-fit-text}
Cast your minds back
:::
:::

# C4 Model

## Recap

![](figures/c4-static.png){.absolute bottom=2 width="1050" height="580"}

## Data Archive

![](figures/DataArchivePlatform.png){.absolute bottom=2 left=211 width="627" height="600"}


## ARC Services Portal

![](figures/C2-Portal_Containers.png){.absolute bottom=2 left=68 width="914" height="600"}

## {data-menu-title="Origins"}

[c4model.com](https://c4model.com/):

> The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase.

## Rationale {data-menu-title="Rationale (i)"}

::: {.r-hstack}
::: {.r-stack}
![](/calm/figures/sketch-1.jpg){.fragment height=280}
![](/calm/figures/sketch-3.jpg){.fragment height=280}
:::

::: {.r-stack}
![](/calm/figures/sketch-2.jpg){.fragment height=280}
![](/calm/figures/sketch-4.jpg){.fragment height=280}
:::
:::


## Rationale {data-menu-title="Rationale (ii)"}

- Inconsistent notation (colour coding, shapes, line styles, etc.)
- Ambiguous naming
- Unlabelled relationships
- Generic terminology
- Missing technology choices
- Mixed abstractions
- `Not good for communicating architecture`

## Workflow {data-menu-title="Workflow (i)"} 

1. Model using [Structurizr](https://docs.structurizr.com/) DSL

::: {.fragment .fade-left}

```{.python code-line-numbers="|5|11,12|14,15,16,17|19|23|26,27,28|32|33,34,35,40,41,42|25,31,38"}
workspace "ARC Services Portal" "Models the architecture of a research services web portal" {

    !identifiers hierarchical

    model {

        properties {
            "structurizr.groupSeparator" "/"
        }

        user = person "Researcher" "Uses the platform to manage their research profile and data."
        admin = person "Admin" "Portal user with elevated permissions to edit data or review submissions."

        entra = softwareSystem "Microsoft Entra" "Identity provider (SSO)" "Existing System"
        tre = softwareSystem "TRE" "Secure processing environment for sensitive research data" "Existing System"
        ghcr = softwareSystem "GitHub Container Registry" "Stores container images" "Existing System"
        uclSystem = softwareSystem "..." "Other UCL consumer of portal data" "Existing System"

        portal = softwareSystem "ARC Services Portal" "Enables management of Studies, Projects, user training and information governance" {

            group "K8S cluster" {

                api = container "API" "API backend with /web/api and /tre/api (and other) endpoints" "Go" {

                    group "Shared Services" {
                        projectService = component "Project Service" "Handles project workflows" "Go"
                        userService = component "User Service" "Handles user workflows" "Go"
                        otherService = component "..." "Other backend services" "Go"
                    }

                    group "Web API" {
                        webhttpHandlers = component "HTTP Handlers for web frontend" "Handles REST endpoints" "Go"
                        webhttpHandlers -> userService "Calls"
                        webhttpHandlers -> projectService "Calls"
                        webhttpHandlers -> otherService "Calls"
                    }

                    group "TRE API" {
                        trehttpHandlers = component "HTTP Handlers for UCL TREs" "Handles REST endpoints" "Go"
                        trehttpHandlers -> userService "Calls"
                        trehttpHandlers -> projectService "Calls"
                        trehttpHandlers -> otherService "Calls"
                    }

                    group "Other API" {
                        otherhttpHandlers = component "HTTP Handlers for other UCL systems" "Handles REST endpoints" "Go"
                        otherhttpHandlers -> otherService "Calls"
                    }
                }

                webFrontend = container "Web Frontend" "User-facing web app" "React, TypeScript" {
                    pages = component "Pages" "UCL Design System-styled pages for profile, studies, projects" "React"
                    apiClient = component "API Client" "Generated from OpenAPI spec" "TypeScript"

                    pages -> apiClient "Calls"
                }

                oauth2Proxy = container "OAuth2 Proxy" "Proxy providing OAuth2 authentication" "quay.io/oauth2-proxy/oauth2-proxy"

                nginx = container "Reverse Proxy" "Routes requests to frontend and backend" "nginx"

                postgres = container "Database" "Stores user, project, portal etc. data" "PostgreSQL"

                api.projectService -> postgres "Reads/writes data"
                api.userService -> postgres "Reads/writes data"
                api.otherService -> postgres "Read/writes data"
                nginx -> api.trehttpHandlers "Proxies /tre/api requests"
                nginx -> api.otherhttpHandlers "Proxies other api requests"
                nginx -> webFrontend.pages "Serves"
                webFrontend.apiClient -> oauth2Proxy "Forwards /web/api requests for authentication"
                oauth2Proxy -> api.webhttpHandlers "Forwards authenticated /web/api requests to backend"

            }

            deploy = container "CI/CD Pipeline" "Builds and deploys infrastructure and app" "GitHub Actions + Terraform" {

                group "Portal App Repository" {
                    gha_portal = component "GitHub Actions (Portal Repo)" "Builds & pushes container images" "GitHub Actions"
                }

                group "Infrastructure Repository" {
                    gha_infra = component "GitHub Actions (Infra Repo)" "Applies Terraform in AWS" "GitHub Actions"
                    tf = component "Terraform Code" "Defines and provisions cloud infra" "Terraform"
                    gha_infra -> tf "Runs"
                }
            }

            portal.deploy.tf -> ghcr "Pulls images for deployment"
            portal.deploy.gha_portal -> ghcr "Pushes container images"
        }

        user -> portal.webFrontend.pages "Accesses via browser"
        admin -> portal.webFrontend.pages "Administers via browser"
        portal.oauth2Proxy -> entra "Authenticates requests against" "SSO"
        tre -> portal.nginx "Accesses /tre/api for data retrieval" "REST/JSON"
        uclSystem -> portal.nginx "Accesses api for data retrieval" "REST/JSON"
    }

    views {

        systemContext portal "C1-Portal_Context" {
            include *
            description "Context diagram showing how the Research Platform fits within the broader environment."
        }

        container portal "C2-Portal_Containers" {
            include *
            description "Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB."
        }

        component portal.api "C3-Web_API_Internals" {
            include *
            description "Component view showing key service components inside the API backend."
        }

        component portal.webFrontend "C3-Web_Frontend_Internals" {
            include *
            description "Component view showing the UI modules and OpenAPI client."
        }

        component portal.deploy "C3-Deployment_Workflow" {
            include *
            description "Component view showing how CI/CD is managed using GitHub Actions and Terraform."
        }

        styles {
            element "Person" {
                shape person
                background #08427b
                color #ffffff
            }

            element "Software System" {
                background #1168bd
                color #ffffff
            }

            element "Container" {
                background #438dd5
                color #ffffff
            }

            element "Component" {
                background #85bbf0
                color #000000
            }

            element "Existing System" {
                background #999999
            }

            element "Group:K8S cluster" {
                color #d86613
                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png
            }
        }
    }
}
```
:::

## Workflow {data-menu-title="Workflow (ii)"} 

::: {.nonincremental}
2. Create views
:::
```{.python code-line-numbers="|25,31,38|99|101,102,103,104|106,107,108,109|111,112,113,114"}
workspace "ARC Services Portal" "Models the architecture of a research services web portal" {

    !identifiers hierarchical

    model {

        properties {
            "structurizr.groupSeparator" "/"
        }

        user = person "Researcher" "Uses the platform to manage their research profile and data."
        admin = person "Admin" "Portal user with elevated permissions to edit data or review submissions."

        entra = softwareSystem "Microsoft Entra" "Identity provider (SSO)" "Existing System"
        tre = softwareSystem "TRE" "Secure processing environment for sensitive research data" "Existing System"
        ghcr = softwareSystem "GitHub Container Registry" "Stores container images" "Existing System"
        uclSystem = softwareSystem "..." "Other UCL consumer of portal data" "Existing System"

        portal = softwareSystem "ARC Services Portal" "Enables management of Studies, Projects, user training and information governance" {

            group "K8S cluster" {

                api = container "API" "API backend with /web/api and /tre/api (and other) endpoints" "Go" {

                    group "Shared Services" {
                        projectService = component "Project Service" "Handles project workflows" "Go"
                        userService = component "User Service" "Handles user workflows" "Go"
                        otherService = component "..." "Other backend services" "Go"
                    }

                    group "Web API" {
                        webhttpHandlers = component "HTTP Handlers for web frontend" "Handles REST endpoints" "Go"
                        webhttpHandlers -> userService "Calls"
                        webhttpHandlers -> projectService "Calls"
                        webhttpHandlers -> otherService "Calls"
                    }

                    group "TRE API" {
                        trehttpHandlers = component "HTTP Handlers for UCL TREs" "Handles REST endpoints" "Go"
                        trehttpHandlers -> userService "Calls"
                        trehttpHandlers -> projectService "Calls"
                        trehttpHandlers -> otherService "Calls"
                    }

                    group "Other API" {
                        otherhttpHandlers = component "HTTP Handlers for other UCL systems" "Handles REST endpoints" "Go"
                        otherhttpHandlers -> otherService "Calls"
                    }
                }

                webFrontend = container "Web Frontend" "User-facing web app" "React, TypeScript" {
                    pages = component "Pages" "UCL Design System-styled pages for profile, studies, projects" "React"
                    apiClient = component "API Client" "Generated from OpenAPI spec" "TypeScript"

                    pages -> apiClient "Calls"
                }

                oauth2Proxy = container "OAuth2 Proxy" "Proxy providing OAuth2 authentication" "quay.io/oauth2-proxy/oauth2-proxy"

                nginx = container "Reverse Proxy" "Routes requests to frontend and backend" "nginx"

                postgres = container "Database" "Stores user, project, portal etc. data" "PostgreSQL"

                api.projectService -> postgres "Reads/writes data"
                api.userService -> postgres "Reads/writes data"
                api.otherService -> postgres "Read/writes data"
                nginx -> api.trehttpHandlers "Proxies /tre/api requests"
                nginx -> api.otherhttpHandlers "Proxies other api requests"
                nginx -> webFrontend.pages "Serves"
                webFrontend.apiClient -> oauth2Proxy "Forwards /web/api requests for authentication"
                oauth2Proxy -> api.webhttpHandlers "Forwards authenticated /web/api requests to backend"

            }

            deploy = container "CI/CD Pipeline" "Builds and deploys infrastructure and app" "GitHub Actions + Terraform" {

                group "Portal App Repository" {
                    gha_portal = component "GitHub Actions (Portal Repo)" "Builds & pushes container images" "GitHub Actions"
                }

                group "Infrastructure Repository" {
                    gha_infra = component "GitHub Actions (Infra Repo)" "Applies Terraform in AWS" "GitHub Actions"
                    tf = component "Terraform Code" "Defines and provisions cloud infra" "Terraform"
                    gha_infra -> tf "Runs"
                }
            }

            portal.deploy.tf -> ghcr "Pulls images for deployment"
            portal.deploy.gha_portal -> ghcr "Pushes container images"
        }

        user -> portal.webFrontend.pages "Accesses via browser"
        admin -> portal.webFrontend.pages "Administers via browser"
        portal.oauth2Proxy -> entra "Authenticates requests against" "SSO"
        tre -> portal.nginx "Accesses /tre/api for data retrieval" "REST/JSON"
        uclSystem -> portal.nginx "Accesses api for data retrieval" "REST/JSON"
    }

    views {

        systemContext portal "C1-Portal_Context" {
            include *
            description "Context diagram showing how the Research Platform fits within the broader environment."
        }

        container portal "C2-Portal_Containers" {
            include *
            description "Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB."
        }

        component portal.api "C3-Web_API_Internals" {
            include *
            description "Component view showing key service components inside the API backend."
        }

        component portal.webFrontend "C3-Web_Frontend_Internals" {
            include *
            description "Component view showing the UI modules and OpenAPI client."
        }

        component portal.deploy "C3-Deployment_Workflow" {
            include *
            description "Component view showing how CI/CD is managed using GitHub Actions and Terraform."
        }

        styles {
            element "Person" {
                shape person
                background #08427b
                color #ffffff
            }

            element "Software System" {
                background #1168bd
                color #ffffff
            }

            element "Container" {
                background #438dd5
                color #ffffff
            }

            element "Component" {
                background #85bbf0
                color #000000
            }

            element "Existing System" {
                background #999999
            }

            element "Group:K8S cluster" {
                color #d86613
                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png
            }
        }
    }
}
```

## Workflow {data-menu-title="Workflow (iii)"}

::: {.nonincremental}
3. Apply styles
:::
```{.python code-line-numbers="|111,112,113,114|126|127,128,129,130,131|133,134,135,136|138,139,140,141"}
workspace "ARC Services Portal" "Models the architecture of a research services web portal" {

    !identifiers hierarchical

    model {

        properties {
            "structurizr.groupSeparator" "/"
        }

        user = person "Researcher" "Uses the platform to manage their research profile and data."
        admin = person "Admin" "Portal user with elevated permissions to edit data or review submissions."

        entra = softwareSystem "Microsoft Entra" "Identity provider (SSO)" "Existing System"
        tre = softwareSystem "TRE" "Secure processing environment for sensitive research data" "Existing System"
        ghcr = softwareSystem "GitHub Container Registry" "Stores container images" "Existing System"
        uclSystem = softwareSystem "..." "Other UCL consumer of portal data" "Existing System"

        portal = softwareSystem "ARC Services Portal" "Enables management of Studies, Projects, user training and information governance" {

            group "K8S cluster" {

                api = container "API" "API backend with /web/api and /tre/api (and other) endpoints" "Go" {

                    group "Shared Services" {
                        projectService = component "Project Service" "Handles project workflows" "Go"
                        userService = component "User Service" "Handles user workflows" "Go"
                        otherService = component "..." "Other backend services" "Go"
                    }

                    group "Web API" {
                        webhttpHandlers = component "HTTP Handlers for web frontend" "Handles REST endpoints" "Go"
                        webhttpHandlers -> userService "Calls"
                        webhttpHandlers -> projectService "Calls"
                        webhttpHandlers -> otherService "Calls"
                    }

                    group "TRE API" {
                        trehttpHandlers = component "HTTP Handlers for UCL TREs" "Handles REST endpoints" "Go"
                        trehttpHandlers -> userService "Calls"
                        trehttpHandlers -> projectService "Calls"
                        trehttpHandlers -> otherService "Calls"
                    }

                    group "Other API" {
                        otherhttpHandlers = component "HTTP Handlers for other UCL systems" "Handles REST endpoints" "Go"
                        otherhttpHandlers -> otherService "Calls"
                    }
                }

                webFrontend = container "Web Frontend" "User-facing web app" "React, TypeScript" {
                    pages = component "Pages" "UCL Design System-styled pages for profile, studies, projects" "React"
                    apiClient = component "API Client" "Generated from OpenAPI spec" "TypeScript"

                    pages -> apiClient "Calls"
                }

                oauth2Proxy = container "OAuth2 Proxy" "Proxy providing OAuth2 authentication" "quay.io/oauth2-proxy/oauth2-proxy"

                nginx = container "Reverse Proxy" "Routes requests to frontend and backend" "nginx"

                postgres = container "Database" "Stores user, project, portal etc. data" "PostgreSQL"

                api.projectService -> postgres "Reads/writes data"
                api.userService -> postgres "Reads/writes data"
                api.otherService -> postgres "Read/writes data"
                nginx -> api.trehttpHandlers "Proxies /tre/api requests"
                nginx -> api.otherhttpHandlers "Proxies other api requests"
                nginx -> webFrontend.pages "Serves"
                webFrontend.apiClient -> oauth2Proxy "Forwards /web/api requests for authentication"
                oauth2Proxy -> api.webhttpHandlers "Forwards authenticated /web/api requests to backend"

            }

            deploy = container "CI/CD Pipeline" "Builds and deploys infrastructure and app" "GitHub Actions + Terraform" {

                group "Portal App Repository" {
                    gha_portal = component "GitHub Actions (Portal Repo)" "Builds & pushes container images" "GitHub Actions"
                }

                group "Infrastructure Repository" {
                    gha_infra = component "GitHub Actions (Infra Repo)" "Applies Terraform in AWS" "GitHub Actions"
                    tf = component "Terraform Code" "Defines and provisions cloud infra" "Terraform"
                    gha_infra -> tf "Runs"
                }
            }

            portal.deploy.tf -> ghcr "Pulls images for deployment"
            portal.deploy.gha_portal -> ghcr "Pushes container images"
        }

        user -> portal.webFrontend.pages "Accesses via browser"
        admin -> portal.webFrontend.pages "Administers via browser"
        portal.oauth2Proxy -> entra "Authenticates requests against" "SSO"
        tre -> portal.nginx "Accesses /tre/api for data retrieval" "REST/JSON"
        uclSystem -> portal.nginx "Accesses api for data retrieval" "REST/JSON"
    }

    views {

        systemContext portal "C1-Portal_Context" {
            include *
            description "Context diagram showing how the Research Platform fits within the broader environment."
        }

        container portal "C2-Portal_Containers" {
            include *
            description "Container view showing major services running in Kubernetes, including API, frontend, proxy, and DB."
        }

        component portal.api "C3-Web_API_Internals" {
            include *
            description "Component view showing key service components inside the API backend."
        }

        component portal.webFrontend "C3-Web_Frontend_Internals" {
            include *
            description "Component view showing the UI modules and OpenAPI client."
        }

        component portal.deploy "C3-Deployment_Workflow" {
            include *
            description "Component view showing how CI/CD is managed using GitHub Actions and Terraform."
        }

        styles {
            element "Person" {
                shape person
                background #08427b
                color #ffffff
            }

            element "Software System" {
                background #1168bd
                color #ffffff
            }

            element "Container" {
                background #438dd5
                color #ffffff
            }

            element "Component" {
                background #85bbf0
                color #000000
            }

            element "Existing System" {
                background #999999
            }

            element "Group:K8S cluster" {
                color #d86613
                icon https://static.structurizr.com/themes/amazon-web-services-2020.04.30/amazon-elastic-kubernetes-service.png
            }
        }
    }
}
```
## Workflow {data-menu-title="Workflow (iv)"}

::: {.nonincremental}
4. Generate and export images
:::
::: {.fragment .fade-left}

```{.bash code-line-numbers="true"}
docker pull structurizr/lite
docker run -it --rm -p 8080:8080 -v PATH:/usr/local/structurizr structurizr/lite
```
:::

## ARC Services Portal {data-menu-title="Generated C4 diagram"}

![](figures/C2-Portal_Containers.png){.absolute bottom=2 left=68 width="914" height="600"}

# CALM

## What is CALM?

The Common Architecture Language Model

[![](figures/finos-calm.png)](https://calm.finos.org/)

::: footer
https://calm.finos.org/
:::

## How does CALM fit in?

- It does not replace the C4 model, it complements it

## C4 Comparison

:::: {.columns}

::: {.column .fragment .fade-left}
`C4 Model`

- A set of hierarchical abstractions - software systems, containers, components, and code.
- Diagrams - system context, containers, components (and code)
- Notation independent
- Tooling independent
:::

::: {.column .fragment .fade-left}
`CALM`

- A JSON Meta Schema to define your architecture
- A CLI for generating, validating, docifying architectures
- A UI for visualising architectures
- Provides the `notation` and `tooling` C4 is agnostic about
:::

::::

## JSON Schemas

::: {.fragment .fade-left}
... are gross
:::

::: {.fragment .fade-left}
```{.json code-line-numbers=|3,4|7|13|19|22|25|31|22|22,19}
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://calm.finos.org/release/1.0/meta/core.json",
  "title": "Common Architecture Language Model (CALM) Vocab",
  "type" : "object",
  "properties": {
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/defs/node"
      }
    },
    "relationships": {
      "type": "array",
      "items": {
        "$ref": "#/defs/relationship"
      }
    },
    "metadata": {
      "$ref": "#/defs/metadata"
    },
    "controls": {
      "$ref": "control.json#/defs/controls"
    },
    "flows": {
      "type": "array",
      "items": {
        "$ref": "flow.json#/defs/flow"
      }
    },
    "adrs": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "External links to ADRs (Architecture Decision Records) or similar documents that provide context or decisions related to the architecture. These can be URLs or references to internal documentation."
    },
    "additionalProperties": false
  },
  "defs": {
    "node": {
      "type": "object",
      "properties": {
        "unique-id": {
          "type": "string"
        },
        "node-type": {
          "$ref": "#/defs/node-type-definition"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "properties": {
            "detailed-architecture": {
              "type": "string"
            },
            "required-pattern": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "interfaces": {
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "interface.json#/defs/interface-definition" },
              { "$ref": "interface.json#/defs/interface-type" }
            ]
          }
        },
        "controls": {
          "$ref": "control.json#/defs/controls"
        },
        "metadata": {
          "$ref": "#/defs/metadata"
        }
      },
      "required": [
        "unique-id",
        "node-type",
        "name",
        "description"
      ],
      "additionalProperties": true
    },
    "relationship": {
      "type": "object",
      "properties": {
        "unique-id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "relationship-type": {
          "type": "object",
          "properties": {
            "interacts": {
              "$ref": "#/defs/interacts-type"
            },
            "connects": {
              "$ref": "#/defs/connects-type"
            },
            "deployed-in": {
              "$ref": "#/defs/deployed-in-type"
            },
            "composed-of": {
              "$ref": "#/defs/composed-of-type"
            },
            "options": {
              "$ref": "#/defs/option-type"
            }
          },
          "oneOf": [
            {
              "required": [
                "deployed-in"
              ]
            },
            {
              "required": [
                "composed-of"
              ]
            },
            {
              "required": [
                "interacts"
              ]
            },
            {
              "required": [
                "connects"
              ]
            },
            {
              "required": [
                "options"
              ]
            }
          ]
        },
        "protocol": {
          "$ref": "#/defs/protocol"
        },
        "metadata": {
          "$ref": "#/defs/metadata"
        },
        "controls": {
          "$ref": "control.json#/defs/controls"
        }
      },
      "required": [
        "unique-id",
        "relationship-type"
      ],
      "additionalProperties": true
    },
    "protocol": {
      "enum": [
        "HTTP",
        "HTTPS",
        "FTP",
        "SFTP",
        "JDBC",
        "WebSocket",
        "SocketIO",
        "LDAP",
        "AMQP",
        "TLS",
        "mTLS",
        "TCP"
      ]
    },
    "node-type-definition": {
      "anyOf": [
        {
          "enum": [
            "actor",
            "ecosystem",
            "system",
            "service",
            "database",
            "network",
            "ldap",
            "webclient",
            "data-asset"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "interacts-type": {
      "type": "object",
      "properties": {
        "actor": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "actor",
        "nodes"
      ]
    },
    "connects-type": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "interface.json#/defs/node-interface"
        },
        "destination": {
          "$ref": "interface.json#/defs/node-interface"
        }
      },
      "required": [
        "source",
        "destination"
      ]
    },
    "deployed-in-type": {
      "type": "object",
      "properties": {
        "container": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "container",
        "nodes"
      ]
    },
    "composed-of-type": {
      "type": "object",
      "properties": {
        "container": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "container",
        "nodes"
      ]
    },
    "option-type": {
      "type": "array",
      "items": {
        "$ref": "#/defs/decision"
      }
    },
    "decision": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relationships": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "description",
        "nodes",
        "relationships"
      ]
    },
    "metadata": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ]
    }
  }
}
```
:::

## CALM's superpower

<span class="fragment" data-fragment-index="1">Patterns!</span> <span class="fragment" data-fragment-index="2">Through the use of the CALM CLI:</span>

::: {.fragment .fade-left}
```{.bash code-line-numbers=|11}
Usage: calm [options] [command]

A set of tools for interacting with the Common Architecture Language Model (CALM)

Options:
  -V, --version       output the version number
  -h, --help          display help for command

Commands:
  generate [options]  Generate an architecture from a CALM pattern file.
  validate [options]  Validate that an architecture conforms to a given CALM pattern.
  docify [options]    Generate a documentation website off your CALM model
  help [command]      display help for command
```
:::

## First Create a Pattern

