---
author: "Finley Bacon"
date: 2025-09-24
format: revealjs
subtitle: "ISD Architecture"
title: "CALM:<br> Architecture-as-Code"
---

# Architecture as Code?

## What?

- Modelling architecture in code (e.g. JSON, YAML, DSLs)
- Generate diagrams from models instead of manually drawing them
- Store architecture close to source code

## Why?

::: {.fragment}
Alleged benefits:
:::

- Machine-readable architecture models enable automated validation & compliance checks
- Architecture can be version controlled alongside source code
- Developers and architects work from the same source of truth
- A single model can generate multiple outputs (diagrams, documentation, reports)
- Easier to keep architecture up to date as the system changes

## Before we test those claims...
::: {.fragment}
::: {.r-fit-text}
Cast your minds back
:::
:::

# C4 Model

## Recap

![](figures/c4-static.png){.absolute bottom=2 width="1050" height="580"}

## Data Archive

![](figures/DataArchivePlatform.png){.absolute bottom=2 left=211 width="627" height="600"}


## ARC Services Portal

![](figures/C2-Portal_Containers.png){.absolute bottom=2 left=68 width="914" height="600"}

## {data-menu-title="Origins"}

[c4model.com](https://c4model.com/):

> The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase.

## Rationale {data-menu-title="Rationale (i)"}

::: {.r-hstack}
::: {.r-stack}
![](/calm/figures/sketch-1.jpg){.fragment height=280}
![](/calm/figures/sketch-3.jpg){.fragment height=280}
:::

::: {.r-stack}
![](/calm/figures/sketch-2.jpg){.fragment height=280}
![](/calm/figures/sketch-4.jpg){.fragment height=280}
:::
:::


## Rationale {data-menu-title="Rationale (ii)"}

- Inconsistent notation (colour coding, shapes, line styles, etc.)
- Ambiguous naming
- Unlabelled relationships
- Generic terminology
- Missing technology choices
- Mixed abstractions
- `Not good for communicating architecture`

## Workflow {data-menu-title="Workflow (i)"} 

1. Model using [Structurizr](https://docs.structurizr.com/) DSL

::: {.fragment .fade-left}
{{< include code-blocks/workflow-i.qmd >}}
:::

## Workflow {data-menu-title="Workflow (ii)"} 

::: {.nonincremental}
2. Create views
:::

{{< include code-blocks/workflow-ii.qmd >}}

## Workflow {data-menu-title="Workflow (iii)"}

::: {.nonincremental}
3. Apply styles
:::
{{< include code-blocks/workflow-iii.qmd >}}

## Workflow {data-menu-title="Workflow (iv)"}

::: {.nonincremental}
4. Generate and export images
:::
::: {.fragment .fade-left}

```{.bash code-line-numbers="true"}
docker pull structurizr/lite
docker run -it --rm -p 8080:8080 -v PATH:/usr/local/structurizr structurizr/lite
```
:::

## ARC Services Portal {data-menu-title="Generated C4 diagram"}

![](figures/C2-Portal_Containers.png){.absolute bottom=2 left=68 width="914" height="600"}

# CALM

## What is CALM?

The Common Architecture Language Model

[![](figures/finos-calm.png)](https://calm.finos.org/)

::: footer
https://calm.finos.org/
:::

## How does CALM fit in?

- It does not replace the C4 model, it complements it

## C4 Comparison

:::: {.columns}

::: {.column .fragment .fade-left}
`C4 Model`

- A set of hierarchical abstractions - software systems, containers, components, and code.
- Diagrams - system context, containers, components (and code)
- Notation independent
- Tooling independent
:::

::: {.column .fragment .fade-left}
`CALM`

- A JSON Meta Schema to define your architecture
- A CLI for generating, validating, docifying architectures
- A UI for visualising architectures
- Provides the `notation` and `tooling` C4 is agnostic about
:::

::::

## JSON Schemas

::: {.fragment .fade-left}
... are gross
:::

::: {.fragment .fade-left}
{{< include code-blocks/core-schema.qmd >}}
:::

## CALM's superpower

<span class="fragment" data-fragment-index="1">Patterns!</span> <span class="fragment" data-fragment-index="2">Through the use of the CALM CLI:</span>

::: {.fragment .fade-left}
{{< include code-blocks/calm-cli.qmd >}}
:::

## Patterns in CALM

::: {.fragment .fade-left }
In CALM, patterns are custom JSON schemas which adhere to the core CALM Meta Schema
:::

::: {.fragment .fade-left}
{{< include code-blocks/consumer-pattern-3.qmd >}}
:::

## Controls in Patterns

::: {.fragment .fade-left }
You can include a control `requirement-url` and a control `config-url`
:::

::: {.fragment .fade-left}
{{< include code-blocks/consumer-pattern-3-control.qmd >}}
:::

## Requirement

::: {.fragment .fade-left}
{{< include code-blocks/control-requirement.qmd >}}
:::

## Config

::: {.fragment .fade-left}
{{< include code-blocks/control-config.qmd >}}
:::